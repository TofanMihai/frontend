{"version":3,"sources":["service/FighterDataService.jsx","service/CovidTestDataService.jsx","component/FighterPanel.jsx","component/MainPanel.jsx","service/EventDataService.jsx","service/ForumService.jsx","component/AdministratorPanel.jsx","component/ForumPanel.jsx","component/Assignment2SD.jsx","App.js","reportWebVitals.js","index.js"],"names":["API_URL","axios","get","fighter","post","startingDate","put","arrivalTestDate","covidTest","FighterPanel","props","state","firstName","lastName","weight","inIsolation","scheduled","message","errorMessage","onSubmit","bind","validate","getArrivalTestDate","this","FighterDataService","then","response","setState","data","console","log","values","parseFloat","insertFighter","fighterFirstName","fighterLastName","arrivalTest","secondTest","secondTestDate","CovidTestDataService","insertCovidTest","catch","error","errors","test","align","className","initialValues","validateOnChange","validateOnBlur","enableReinitialize","name","component","type","Component","MainPanel","fighterClicked","administratorClicked","forumClicked","history","push","onClick","tournamentType","AdministratorPanel","fighters","events","fighterHideCounter","eventHideCounter","getEvents","getFighters","hideFightersTable","switchButtonsVisibility","sendMessage","testFighters","sendArrivalTestDate","generateSchedule","nextWeekEvents","previousWeeksEvents","EventDataService","nextWeek","document","getElementById","style","visibility","previousWeek","resetWeek","generateEvents","forumMessage","ForumService","sendForumMessage","value","tb1","tb2","tb3","tb4","tb5","remove","updateFighters","role","aria-labelledby","id","map","idFighter","event","location","date","hour","fighterOne","fighterTwo","week","idEvent","ForumPanel","getMessage","getForumMessage","class","Assignment2SD","path","exact","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b35a15c1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = \"http://localhost:8080/assignment2\"\r\n\r\nclass FighterDataService\r\n{\r\n    getFighters()\r\n    {\r\n        return axios.get(`${API_URL}/fightersList`);\r\n    }\r\n\r\n    insertFighter(fighter)\r\n    {\r\n        return axios.post(`${API_URL}/fightersTable`, fighter);\r\n    }\r\n\r\n    updateFighters(startingDate)\r\n    {\r\n        return axios.put(`${API_URL}/updateFighters/${startingDate}`);\r\n    }\r\n\r\n    getArrivalTestDate()\r\n    {\r\n        return axios.get(`${API_URL}/getArrivalTestDate`)\r\n    }\r\n\r\n    sendArrivalTestDate(arrivalTestDate)\r\n    {\r\n        return axios.post(`${API_URL}/sendArrivalTestDate/${arrivalTestDate}`)\r\n    }\r\n}\r\n\r\nexport default new FighterDataService()","import axios from 'axios';\r\n\r\nconst API_URL = \"http://localhost:8080/assignment2\"\r\n\r\nclass CovidTestDataService\r\n{\r\n    getCovidTests()\r\n    {\r\n        return axios.get(`${API_URL}/covidtestsList`);\r\n    }\r\n\r\n    insertCovidTest(covidTest)\r\n    {\r\n        return axios.post(`${API_URL}/covidtestsTable`, covidTest);\r\n    }\r\n}\r\n\r\nexport default new CovidTestDataService()","import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport FighterDataService from \"../service/FighterDataService\";\r\nimport CovidTestDataService from \"../service/CovidTestDataService\";\r\n\r\nclass FighterPanel extends Component\r\n{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state =\r\n        {\r\n            firstName: '',\r\n            lastName: '',\r\n            weight: '',\r\n            inIsolation: 'Yes',\r\n            scheduled: 'No',\r\n            arrivalTestDate: '',\r\n            message: null,\r\n            errorMessage: null\r\n\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.getArrivalTestDate = this.getArrivalTestDate.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getArrivalTestDate()\r\n    }\r\n\r\n    getArrivalTestDate()\r\n    {\r\n        FighterDataService.getArrivalTestDate()\r\n            .then(\r\n                response => {\r\n                    this.setState({arrivalTestDate: response.data})\r\n                    console.log(response)\r\n                }\r\n            )\r\n    }\r\n\r\n    onSubmit(values)\r\n    {\r\n        this.setState({errorMessage: null})\r\n        this.setState({message: null})\r\n\r\n        if(this.state.arrivalTestDate)\r\n        {\r\n            let fighter =\r\n                {\r\n                    firstName: values.firstName,\r\n                    lastName: values.lastName,\r\n                    weight: parseFloat(values.weight),\r\n                    inIsolation: 'Yes',\r\n                    scheduled: 'No',\r\n                }\r\n            FighterDataService.insertFighter(fighter)\r\n                .then\r\n                (\r\n                    response =>\r\n                    {\r\n                        // console.log(this.state.arrivalTestDate)\r\n                        let covidTest =\r\n                            {\r\n                                fighterFirstName: values.firstName,\r\n                                fighterLastName: values.lastName,\r\n                                arrivalTest: 'Negative',\r\n                                arrivalTestDate: this.state.arrivalTestDate,\r\n                                secondTest : null,\r\n                                secondTestDate: null\r\n                            }\r\n                        CovidTestDataService.insertCovidTest(covidTest)\r\n                            .then( response =>\r\n                                {\r\n                                    this.setState({ message: \"Fighter \"+ fighter.firstName + \" \" + fighter.lastName + \" was successfully registered.\" })\r\n                                    this.setState({errorMessage: null})\r\n                                }\r\n                            )\r\n                    }\r\n                )\r\n                .catch\r\n                (\r\n                    error =>\r\n                    {\r\n                        this.setState({errorMessage: error.response.data})\r\n                        this.setState({message: null})\r\n                    }\r\n\r\n                )\r\n        }\r\n        else{\r\n            this.setState({errorMessage: \"The registration period has not yet started. No new tournaments have been announced\"})\r\n            this.setState({message: null})\r\n        }\r\n    }\r\n\r\n    validate(values)\r\n    {\r\n        let errors = {}\r\n        if (!values.firstName)\r\n        {\r\n            errors.firstName = 'The First Name field cannot be empty'\r\n        }\r\n        else if (!/^[a-zA-Z]+$/.test(values.firstName))\r\n        {\r\n            errors.firstName = 'The First Name field has to contain only letters'\r\n        }\r\n        if (!values.lastName)\r\n        {\r\n            errors.lastName = 'The Last Name field has to contain only letters'\r\n        }\r\n        else if (!/^[a-zA-Z]+$/.test(values.lastName))\r\n        {\r\n            errors.lastName = 'Please enter a valid last name containing only letters'\r\n        }\r\n        if (!values.weight)\r\n        {\r\n            errors.weight = 'The Weight field cannot be empty'\r\n        }\r\n        else if (!/[0-9]+.?[0-9]?/.test(values.weight))\r\n        {\r\n            errors.weight = 'The Weight field has to contain a real number'\r\n        }\r\n        if(errors)\r\n            this.setState({message: null})\r\n        return errors\r\n    }\r\n\r\n    render()\r\n    {\r\n        let { firstName, lastName, weight} = this.state\r\n        return (\r\n            <div>\r\n                <br/>\r\n                <h1 align=\"center\" >Fighter Registration Form</h1>\r\n                <hr/>\r\n                <hr/>\r\n                <br/>\r\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\r\n                {this.state.errorMessage && <div className=\"alert alert-danger\">{this.state.errorMessage}</div>}\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ firstName, lastName, weight}}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"firstName\" component=\"div\"\r\n                                                  className=\"alert alert-danger\" />\r\n                                    <ErrorMessage name=\"lastName\" component=\"div\"\r\n                                                  className=\"alert alert-danger\" />\r\n                                    <ErrorMessage name=\"weight\" component=\"div\"\r\n                                                  className=\"alert alert-danger\" />\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>First Name</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"firstName\"/>\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Last Name</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"lastName\"/>\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Weight</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"weight\" />\r\n                                    </fieldset>\r\n                                    <div className=\"wrapper\">\r\n                                        <button className=\"btn btn-success registerFighterButton\" type=\"submit\" >Register</button>\r\n                                    </div>\r\n\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default FighterPanel","import React, {Component} from 'react';\r\n\r\nclass MainPanel extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.fighterClicked = this.fighterClicked.bind(this);\r\n        this.administratorClicked = this.administratorClicked.bind(this);\r\n        this.forumClicked = this.forumClicked.bind(this);\r\n    }\r\n\r\n    fighterClicked()\r\n    {\r\n        this.props.history.push('/fighter/register')\r\n    }\r\n\r\n    administratorClicked(){\r\n        this.props.history.push('/administrator')\r\n    }\r\n\r\n    forumClicked(){\r\n        this.props.history.push('/forum')\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='container'>\r\n                <br/>\r\n                <h1 align=\"center\" > Main Panel</h1>\r\n                <hr/>\r\n                <hr/>\r\n                <br/>\r\n                <h4 align={\"center\"}> Choose the user type</h4>\r\n                <br/>\r\n                <div className=\"mainPanelButtons\">\r\n                <button className=\"btn mp1\" onClick={() => this.fighterClicked()}>Fighter</button>\r\n                <button className=\"btn mp2\" onClick={() => this.administratorClicked()}>Administrator</button>\r\n                </div>\r\n                <div className=\"mainPanelButtons\">\r\n                <button className=\"btn mp3\" onClick={() => this.forumClicked()}>Forum</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPanel","import axios from 'axios';\r\n\r\nconst API_URL = \"http://localhost:8080/assignment2\"\r\n\r\nclass EventDataService\r\n{\r\n    getEvents()\r\n    {\r\n        return axios.get(`${API_URL}/eventsList`);\r\n    }\r\n\r\n    generateEvents(startingDate, tournamentType)\r\n    {\r\n        return axios.post(`${API_URL}/eventsTable/${startingDate}/${tournamentType}`)\r\n    }\r\n\r\n    resetWeek()\r\n    {\r\n        return axios.put(`${API_URL}/resetWeek`)\r\n    }\r\n\r\n    nextWeek(startingDate)\r\n    {\r\n        return axios.post(`${API_URL}/eventsTable/next/${startingDate}`)\r\n    }\r\n\r\n    previousWeek(startingDate)\r\n    {\r\n        return axios.post(`${API_URL}/eventsTable/previous/${startingDate}`)\r\n    }\r\n}\r\n\r\nexport default new EventDataService()","import axios from 'axios';\r\n\r\nconst API_URL = \"http://localhost:8080/assignment2\"\r\n\r\nclass ForumService\r\n{\r\n    getForumMessage()\r\n    {\r\n        return axios.get(`${API_URL}/getInvite`);\r\n    }\r\n\r\n    sendForumMessage(message){\r\n        return axios.post(`${API_URL}/sendInvite/${message}`);\r\n    }\r\n}\r\n\r\nexport default new ForumService()","import React, { Component } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport FighterDataService from \"../service/FighterDataService\";\r\nimport EventDataService from \"../service/EventDataService\";\r\nimport ForumService from \"../service/ForumService\";\r\n\r\nclass AdministratorPanel extends Component\r\n{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state =\r\n        {\r\n            startingDate: '',\r\n            tournamentType: '',\r\n            fighters: [],\r\n            events: [],\r\n            message: null,\r\n            errorMessage: null,\r\n            fighterHideCounter: 0,\r\n             eventHideCounter: 0\r\n\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.getEvents = this.getEvents.bind(this)\r\n        this.getFighters = this.getFighters.bind(this)\r\n        this.hideFightersTable = this.hideFightersTable.bind(this)\r\n        // this.hideEventsTable = this.hideEventsTable.bind(this)\r\n        this.switchButtonsVisibility = this.switchButtonsVisibility.bind(this)\r\n        this.sendMessage = this.sendMessage.bind(this)\r\n        this.testFighters = this.testFighters.bind(this)\r\n        this.sendArrivalTestDate = this.sendArrivalTestDate.bind(this)\r\n        this.generateSchedule = this.generateSchedule.bind(this)\r\n        this.nextWeekEvents = this.nextWeekEvents.bind(this)\r\n        this.previousWeeksEvents = this.previousWeeksEvents.bind(this)\r\n        this.switchButtonsVisibility = this.switchButtonsVisibility.bind(this)\r\n    }\r\n\r\n    nextWeekEvents(){\r\n        EventDataService.nextWeek(this.state.startingDate)\r\n            .then(\r\n                response =>\r\n                {\r\n                    const tb = document.getElementById(\"eventTableID\");\r\n                    tb.style.visibility = \"visible\";\r\n                    this.setState({events: response.data})\r\n                    console.log(this.state.events)\r\n                }\r\n            )\r\n            .catch(\r\n                () => {\r\n                    this.setState({errorMessage: \"No events to display\"})\r\n                }\r\n            )\r\n    }\r\n\r\n    previousWeeksEvents(){\r\n        EventDataService.previousWeek(this.state.startingDate)\r\n            .then(\r\n                response =>\r\n                {\r\n                    const tb = document.getElementById(\"eventTableID\");\r\n                    tb.style.visibility = \"visible\";\r\n                    this.setState({events: response.data})\r\n                    console.log(this.state.events)\r\n                }\r\n            )\r\n            .catch(\r\n                () => {\r\n                    this.setState({errorMessage: \"No events to display\"})\r\n                }\r\n            )\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        EventDataService.resetWeek().then(()=>{console.log(\"week reset\")})\r\n        const tb1 = document.getElementById(\"fighterTableID\");\r\n        tb1.style.visibility = \"hidden\";\r\n        const tb2 = document.getElementById(\"eventTableID\");\r\n        tb2.style.visibility = \"hidden\";\r\n        this.switchButtonsVisibility(1);\r\n        this.setState({fighterHideCounter: 1})\r\n     //   this.setState({eventHideCounter: this.state.fighterHideCounter + 1})\r\n\r\n    }\r\n\r\n    generateSchedule(){\r\n        EventDataService.generateEvents(this.state.startingDate, this.state.tournamentType)\r\n            .then(\r\n                response => {\r\n                    this.setState({events: response.data})\r\n                    this.setState({errorMessage:null})\r\n\r\n                    const tb = document.getElementById(\"eventTableID\");\r\n                    tb.style.visibility = \"visible\";\r\n                }\r\n            )\r\n            .catch(\r\n                error => {\r\n                    this.setState({errorMessage: null})\r\n                    this.setState({message: \"The schedule is finished\"})\r\n                    this.setState({events:this.state.events})\r\n                    console.log(this.state.events)\r\n\r\n                }\r\n            )\r\n    }\r\n\r\n    sendArrivalTestDate()\r\n    {\r\n        FighterDataService.sendArrivalTestDate(this.state.startingDate).then(() => {console.log(this.state.startingDate)})\r\n    }\r\n\r\n    getEvents(){\r\n        EventDataService.getEvents()\r\n            .then(\r\n                response => {\r\n                    this.setState({events: response.data})\r\n                }\r\n            )\r\n    }\r\n\r\n    getFighters(){\r\n        FighterDataService.getFighters()\r\n            .then(\r\n                response => {\r\n                    this.setState({fighters: response.data})\r\n                }\r\n            )\r\n    }\r\n\r\n    sendMessage()\r\n    {\r\n        let forumMessage = \"Dear Fighters,\"\r\n    + \"The UFC International commitee is happy to announce that \"\r\n    + \"the annual UFC Tournament will start the registering period beginning \"\r\n    + \"with the date of \" + this.state.startingDate +\". Because of the current  \"\r\n    + \"Coronavirus pandemic, fighters are required to present \"\r\n    + \"themselves at the tournament with a negative Covid Test, \"\r\n    + \"where further examinations will take place.\"\r\n    + \" Thank you for your cooperation.\"\r\n    + \"                   Good luck to you all !\";\r\n\r\n        ForumService.sendForumMessage(forumMessage)\r\n            .then\r\n            (  () =>\r\n                {\r\n                    this.setState({message: \"Invitations have been sent\"})\r\n                    this.setState({errorMessage: null})\r\n                }\r\n            )\r\n    }\r\n\r\n    // hideEventsTable()\r\n    // {\r\n    //     // eslint-disable-next-line\r\n    //     if((this.state.eventHideCounter %2) !== 0)\r\n    //     {\r\n    //         this.setState({events: []})\r\n    //         const tb = document.getElementById(\"eventTableID\");\r\n    //         tb.style.visibility = \"hidden\";\r\n    //     }\r\n    //\r\n    //     else\r\n    //     {\r\n    //         this.getEvents()\r\n    //         const tb = document.getElementById(\"eventTableID\");\r\n    //         tb.style.visibility = \"visible\";\r\n    //     }\r\n    //\r\n    //\r\n    //     this.setState({eventHideCounter: this.state.eventHideCounter + 1})\r\n    // }\r\n\r\n    switchButtonsVisibility(value)\r\n    {\r\n        const tb1 = document.getElementById(\"fightersButtonID\");\r\n        const tb2 = document.getElementById(\"generateScheduleButtonID\");\r\n        const tb3 = document.getElementById(\"fightersTableButtonID\");\r\n        const tb4 = document.getElementById(\"prevID\");\r\n        const tb5 = document.getElementById(\"nextID\");\r\n\r\n        // eslint-disable-next-line\r\n        if(value == 0)\r\n        {\r\n            // tb1.style.visibility = \"hidden\";\r\n            tb1.remove();\r\n            tb2.style.visibility = \"visible\";\r\n            tb3.style.visibility = \"visible\";\r\n            tb4.style.visibility = \"visible\";\r\n            tb5.style.visibility = \"visible\";\r\n\r\n        }\r\n\r\n        else\r\n        {\r\n            tb1.style.visibility = \"visible\"\r\n            tb2.style.visibility = \"hidden\"\r\n            tb3.style.visibility = \"hidden\";\r\n            tb4.style.visibility = \"hidden\";\r\n            tb5.style.visibility = \"hidden\";\r\n        }\r\n\r\n    }\r\n\r\n    hideFightersTable()\r\n    {\r\n        console.log(this.state.fighterHideCounter)\r\n        // eslint-disable-next-line\r\n        if((this.state.fighterHideCounter %2) === 0)\r\n        {\r\n            this.setState({fighters: []})\r\n            const tb = document.getElementById(\"fighterTableID\");\r\n            tb.style.visibility = \"hidden\";\r\n        }\r\n\r\n        else\r\n        {\r\n            this.getFighters()\r\n            const tb = document.getElementById(\"fighterTableID\");\r\n            tb.style.visibility = \"visible\";\r\n        }\r\n\r\n        this.setState({fighterHideCounter: this.state.fighterHideCounter + 1})\r\n    }\r\n\r\n    testFighters()\r\n    {\r\n        if(this.state.startingDate){\r\n            FighterDataService.updateFighters(this.state.startingDate)\r\n                .then(\r\n                    response => {\r\n                        this.setState({message: response.data})\r\n                        this.setState({errorMessage: null})\r\n                        console.log(this.state.fighterHideCounter)\r\n                        const tb1 = document.getElementById(\"fighterTableID\");\r\n                        tb1.style.visibility = \"visible\";\r\n                        const tb2 = document.getElementById(\"fightersTableButtonID\");\r\n                        tb2.style.visibility = \"visible\";\r\n                        this.getFighters()\r\n                        this.setState({fighterHideCounter: 0})\r\n                        if(response.data === \"All the fighters are ready. The tournament can begin\")\r\n                        {\r\n                            this.switchButtonsVisibility(0)\r\n                        }\r\n\r\n\r\n                    }\r\n                )\r\n                .catch(\r\n                    error => {\r\n                        this.setState({errorMessage: error.response.data})\r\n                        this.setState({message: null})\r\n                    }\r\n                )\r\n        }\r\n        else\r\n        {\r\n            this.setState({errorMessage: \"The invitations for the tournament have not yet been sent\"})\r\n            this.setState({message: null})\r\n        }\r\n    }\r\n\r\n    onSubmit(values)\r\n    {\r\n        this.setState({startingDate: values.startingDate})\r\n        this.setState({tournamentType: values.tournamentType})\r\n        this.sendMessage()\r\n        this.sendArrivalTestDate()\r\n    }\r\n\r\n    validate(values)\r\n    {\r\n        let errors = {}\r\n        if (!values.startingDate)\r\n        {\r\n            errors.startingDate = 'The Date field cannot be empty'\r\n        }\r\n        if(!values.tournamentType)\r\n        {\r\n            errors.tournamentType = 'The Tournament you wish to generate must have a type'\r\n        }\r\n        return errors\r\n    }\r\n\r\n    render()\r\n    {\r\n        let { startingDate, tournamentType} = this.state\r\n        return (\r\n            <div>\r\n                <br/>\r\n                <h1 align=\"center\" >Administrator Panel</h1>\r\n                <hr/>\r\n                <hr/>\r\n                <br/>\r\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\r\n                {this.state.errorMessage && <div className=\"alert alert-danger\">{this.state.errorMessage}</div>}\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{startingDate,tournamentType}}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"startingDate\" component=\"div\"\r\n                                                  className=\"alert alert-danger\" />\r\n                                    <ErrorMessage name=\"tournamentType\" component=\"div\"\r\n                                                  className=\"alert alert-danger\" />\r\n                                    <fieldset className=\"startingDate\">\r\n                                        <label>Registration Date</label>\r\n                                        <Field className=\"form-control\" type=\"date\" name=\"startingDate\" />\r\n                                    </fieldset>\r\n                                    <br/>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Select the type of tournament you wish to generate</label>\r\n                                        <div role=\"group\" aria-labelledby=\"my-radio-group\">\r\n                                            <label >\r\n                                                <Field type=\"radio\" name=\"tournamentType\" value=\"Weekly\" id = \"weeklyRadio\" />\r\n                                                Weekly\r\n                                            </label>\r\n                                            <br/>\r\n                                            <label>\r\n                                                <Field type=\"radio\" name=\"tournamentType\" value=\"Monthly\" id = \"monthlyRadio\" />\r\n                                                Monthly\r\n                                            </label>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <div className=\"wrapper\">\r\n                                        <button className=\"btn sendInvitationsButton\" type=\"submit\" >Send Invitations</button>\r\n                                    </div>\r\n\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n                <div className=\"wrapper\" >\r\n                <button className=\"btn testFightersButton\" onClick={this.testFighters} id = \"fightersButtonID\">Test Fighters</button>\r\n                </div>\r\n                <div className=\"wrapper\" >\r\n                    <button className=\"btn fightersTableButton\" onClick={this.hideFightersTable} id = \"fightersTableButtonID\">Fighters Table</button>\r\n                </div>\r\n\r\n                <div className=\"table\" align={\"center\"}>\r\n                    <thead>\r\n                    <tr id = \"fighterTableID\">\r\n                        <th >First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Weight</th>\r\n                        <th>In Isolation</th>\r\n                        <th>Scheduled</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        this.state.fighters.map(\r\n                            fighter =>\r\n                                <tr key={fighter.idFighter}>\r\n                                    <td>{fighter.firstName}</td>\r\n                                    <td>{fighter.lastName}</td>\r\n                                    <td>{fighter.weight}</td>\r\n                                    <td>{fighter.inIsolation}</td>\r\n                                    <td>{fighter.scheduled}</td>\r\n                                </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </div>\r\n\r\n                <div className=\"wrapper\">\r\n                <button className=\"btn generateScheduleButton\" onClick={this.generateSchedule} id = \"generateScheduleButtonID\" >Generate Schedule</button>\r\n                </div>\r\n\r\n                {/*<button className=\"btn btn-warning\" onClick={this.hideEventsTable}>Events Table</button>*/}\r\n                <br/>\r\n\r\n\r\n\r\n\r\n                <div className=\"weekButtons\">\r\n                    <button className=\"btn btn1\" onClick={this.previousWeeksEvents} id = \"prevID\">Previous week</button>\r\n                    <button className=\"btn btn2\" onClick={this.nextWeekEvents} id=\"nextID\">Next week</button>\r\n                </div>\r\n\r\n                <div className=\"table\" align={\"center\"}>\r\n                    <thead>\r\n                    <tr id = \"eventTableID\">\r\n                        <th>Location</th>\r\n                        <th>Date</th>\r\n                        <th>Hour</th>\r\n                        <th>Fighter One</th>\r\n                        <th>Fighter Two</th>\r\n                        <th>Week</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        this.state.events.map(\r\n                            event =>\r\n                                <tr key={event.idEvent}>\r\n                                    <td>{event.location}</td>\r\n                                    <td>{event.date}</td>\r\n                                    <td>{event.hour}</td>\r\n                                    <td>{event.fighterOne}</td>\r\n                                    <td>{event.fighterTwo}</td>\r\n                                    <td>{event.week}</td>\r\n                                </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AdministratorPanel","import React, { Component } from 'react';\r\nimport ForumService from \"../service/ForumService\";\r\n\r\nclass ForumPanel extends Component\r\n{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state =\r\n        {\r\n          message: \"\"\r\n        }\r\n        this.getMessage = this.getMessage.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMessage()\r\n    }\r\n\r\n    getMessage()\r\n    {\r\n        ForumService.getForumMessage()\r\n            .then(\r\n                response =>\r\n                {\r\n                    this.setState({message: response.data})\r\n                }\r\n            )\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n        let { message } = this.state\r\n        return (\r\n            <div>\r\n                <br/>\r\n                <h1 align=\"center\" >Forum</h1>\r\n                <hr/>\r\n                <hr/>\r\n                <br/>\r\n                <div className=\"container\">\r\n                    <h3 class = \"forumMessage\" >{message}</h3>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForumPanel","import React, { Component } from 'react';\r\nimport FighterPanel from \"./FighterPanel\";\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport MainPanel from \"./MainPanel\";\r\nimport AdministratorPanel from \"./AdministratorPanel\";\r\nimport ForumPanel from \"./ForumPanel\";\r\n\r\n\r\n\r\nclass Assignment2SD extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <>\r\n                    <Switch>\r\n                        <Route path=\"/fighter/register\" component={FighterPanel} />\r\n                        <Route path=\"/\" exact component={MainPanel} />\r\n                        <Route path=\"/administrator\" component={AdministratorPanel} />\r\n                        <Route path=\"/forum\" component={ForumPanel} />\r\n                    </Switch>\r\n                </>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Assignment2SD","import './App.css';\nimport Assignment2SD from \"./component/Assignment2SD\";\n\nfunction App() {\n  return (\n      <div className=\"container\">\n        <Assignment2SD />\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}